// ============================================================

// OFFCANVAS NAV

// Description:
//
// scoped styles for JS powered offcanvas nav. Styles are heavily
// scoped via MQs to avoid effecting larger screens (avoids
// unwanted specificity issues). Offcanvas functionality requires
// JS module to initialise classnames based on DOM events

// ============================================================

@mixin ui-offcanvas(
                        $el-body: ".offcanvas__body",
                        $el-off-right: ".offcanvas__offscreen-right",
                        $el-off-left: ".offcanvas__offscreen-left",
                        $off-width: 260px,
                        $positioning: "fixed"
                    ) {

    // ==========================================================================
    // BASE
    // required for positioning context and clipping in various browsers
    // ==========================================================================

    // rules for the selector on which the mixin was called
    position: relative;
    overflow-x: hidden;
    overflow-y: auto;
    width: 100%;

    // Remove transition flicker on phones
    backface-visibility: hidden;


    // ==========================================================================
    // BODY
    // element that contains the primary "on screen" content
    // ==========================================================================

    #{$el-body} {
        backface-visibility: hidden;
        position: relative;
        z-index: 2;
        overflow-x: hidden; // clip the overflow on older browsers as Android seems to have issues with overflow-x
        width: 100%;
        min-height: 900px; // otherwise the offcanvas shows through...
        background-color: #fff; // required to ensure offscreen if competely covered by "body" element

        // Remove transition flicker on phones

        .csstransforms3d & {
            overflow-x: visible; // reinstate visibility of overflow on more capable browsers
            transform: translate3d(0, 0, 0); // make sure render layer is precomposed
            transition: transform 0.3s ease;
        }

        // "Fade" effect/overlay
        // ==========================================================================
        &:after {
            position: absolute;
            top: 0;
            right: 0;
            width: 0;
            height: 0;
            content: "";
            background: rgba(0, 0, 0, 0.4);
            opacity: 0;
            transition: opacity 0.5s, width 0.1s 0.5s, height 0.1s 0.5s;
            pointer-events: none;
        }
    }


    // ==========================================================================
    // OFFSCREEN
    // the element that is hidden "off screen"
    // ==========================================================================

    #{$el-off-left},
    #{$el-off-right} {
        position: #{$positioning};
        top: 0;
        bottom: 0;
        z-index: 1;
        overflow: hidden;
        width: 98%;
        height: 100%;
        opacity: 0; // hide when not active else it will show through if the body element isn't tall enough

        transform: translate3d(0, 0, 0); // make sure render layer is precomposed
        transition: opacity 0.5s linear;
        backface-visibility: hidden; // remove transition flicker

        // On small screens sometimes the set pixel width is too wide
        // so we only kick this in at larger breakpoints
        @media screen and (min-width: 320px){
            width: $off-width;
        }
    }


    // (Offscreen) LEFT
    // ==========================================================================
    #{$el-off-left} {
        #{$right}: auto;
        #{$left}: 0;
    }

    // (Offscreen) RIGHT
    // =========================================================================
    #{$el-off-right} {
        #{$right}: 0;
        #{$left}: auto;
    }


    // ==========================================================================
    // STATE: ACTIVE
    // move the "body" element left/right to reveal "off" element
    // ==========================================================================
    @include mq($until: nav-break-2) {
        &.is-active-right,
        &.is-active-left {
            #{$el-body} {
                overflow: hidden;
                min-height: 2000px; // fix to ensure offcanvas can never show up due to body not being tall enough

                &:after {
                    width: 100%;
                    height: 100%;
                    opacity: 1;
                    transition: opacity 0.1s;
                }
            }

            #{$el-off-left},
            #{$el-off-right} {
                transition: opacity 0.05s linear;
            }

        }

        // ACTIVE RIGHT
        // ==========================================================================

        &.is-active-right {
            #{$el-body} {
                #{$right}: $off-width;

                .csstransforms3d & {
                    #{$right}: auto;
                    transform: translate3d(flip(-$off-width, $off-width), 0, 0);
                }
            }

            #{$el-off-right} {
                opacity: 1; // restore visbility
            }
        }


        // ACTIVE LEFT
        // ==========================================================================

        &.is-active-left {
            #{$el-body} {
                #{$left}: $off-width;

                .csstransforms3d & {
                    #{$left}: auto;
                    transform: translate3d(flip($off-width, -$off-width), 0, 0);
                }
            }

            #{$el-off-left} {
                opacity: 1; // restore visbility
            }
        }
    }

}//end mixin
