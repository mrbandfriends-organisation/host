// ==========================================================================
// MIXINS
//
// Description: global application wide mixins
//
// ==========================================================================



// ==========================================================================
// TYPOGRAPHY
// ==========================================================================

// # RESPONSIVE TYPE
// # creates a font-size that scales "appropriately" based on the viewport
// ==========================================================================
@mixin responsive-type($font-size-px) {
    font-size: rem($font-size-px/1.5);

    @include mq($from: medium) {
        font-size: rem($font-size-px/1.25);
    }

    @include mq($from: large) {
        font-size: rem($font-size-px);
    }
}


// HEADINGS
// Easily create and apply styles to multiple heading levels
// ==========================================================================
@mixin headings($from: 1, $to: 6) {
    @for $i from $from through $to {
        h#{$i}, .h#{$i}, %h#{$i} {
            @content;
        }
    }
}



// ==========================================================================
// LAYOUT
// ==========================================================================

// CLEARFIX
// ==========================================================================
@mixin clearfix {
    zoom: 1;

    &:before {
        display: table;
        content: "";
    }

    &:after {
        display: table;
        clear: both;
        content: "";
    }
}

// LIST RESET
// resets a list removing all styling and box model attributes
// ==========================================================================
@mixin list-reset {
    list-style: none;
    margin: 0;
    padding: 0;
}


// INLINE BLOCK
// Bourbon is deprecating but we still need it!
// ==========================================================================
@mixin inline-block {
    display: inline-block;
    vertical-align: middle;
    zoom: 1;
    // scss-lint:disable PropertySpelling
    *display: inline;
    // scss-lint:disable PropertySpelling
    *vertical-align: auto;
}



// ==========================================================================
// CSS
// ==========================================================================

// BUTTONS
// ==========================================================================
@mixin button($colourway) {

    @if (map-has-key($button-colours, $colourway)) {

        // get the colours
        $colours: map-get($button-colours, $colourway);
        $background: map-get($colours, background);

        // work out a hover colour
        $hover: if(map-has-key($colours, hover), map-get($colours, hover), darken($background, 10%));

        // # Start outputting */
        // background
        background: $background;

        // foreground colour
        @if (map-has-key($colours, text)) {
            color: map-get($colours, text);
        }

        // border colour
        @if (map-has-key($colours, border)) {
            border-color: map-get($colours, border);
        }

        // hover state
        &:hover { background: $hover; }


    } @else {
        @warn "No colourway #{$colourway} found for buttons"
    }

}

// # EVENT WRAPPER
// credit: Harry Roberts
// https://twitter.com/csswizardry/status/478938530342006784
// ==========================================================================
@mixin on-event($self: false) {
    @if $self {
        &,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}


// SELECTION
// Mixin for selection markup
// ==========================================================================
@mixin selection($background, $color, $element:false) {
    @if($element) {
        // scss-lint:disable VendorPrefix
        &::-moz-selection { background: $background; color: $color; text-shadow: none; }
        &::selection { background: $background; color: $color; text-shadow: none; }
    } @else {
        // scss-lint:disable VendorPrefix
        ::-moz-selection { background: $background; color: $color; text-shadow: none; }
        ::selection { background: $background; color: $color; text-shadow: none; }
    }
}

// PLACEHOLDER
// Mixin for placeholder styling
// ==========================================================================
@mixin placeholder($color) {
    &::-webkit-input-placeholder { color: $color; }
    // scss-lint:disable VendorPrefix
    &:-moz-placeholder { color: $color; }
}

// TAB FOCUS
// Webkit-style focus
// ==========================================================================
@mixin tab-focus {
    outline: thin dotted #333;
    // scss-lint:disable DuplicateProperty
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px;
}

// VENDOR
// ==========================================================================
@mixin vendor($property, $value...) {
    -webkit-#{$property}: $value;
    -moz-#{$property}: $value;
    -ms-#{$property}: $value;
    -o-#{$property}: $value;
    #{$property}: $value;
}


// POINTER EVENTS
// The CSS property pointer-events allows authors to control under what
// circumstances (if any) a particular graphic element can become the target of
// mouse events.
// @see https://developer.mozilla.org/en/CSS/pointer-events
// ==========================================================================
@mixin pointer-events($type: none) {
    $type: unquote($type);
    @include experimental(pointer-events, $type,
        -moz, -webkit, not -o, not -ms, -khtml, official
    );
}


// =============================================================================
// GRID MIXINS & FUNCTIONS
// borrowed and adapted from original source at
// https://raw.github.com/necolas/griddle/master/_griddle-build.scss
// =============================================================================

// Fluid grid units
// modified from original to remove "modifier" and replace
// with "prefix" which is better suited to our grid system
@mixin griddle-build($units, $prefix: "gc") {

    // Full-width breakpoints
    // ==========================================================================
    .#{$prefix}-full {
        @include grid-column(1, 1, $prefix);
    }

    // Proportional units
    // ==========================================================================



    // Specify the proportional width of an object.
    // Primarily for, but not limited to, use with `.grid__cell` components.
    // Intentional redundancy build into each set of unit classes.


    @each $n in $units {
        // Avoid creating rules like `.unit-12-12 {}`
        $x: $n;

        @for $i from 1 through $x {
            // Initialize variables
            $i-r: 0;
            $n-r: 0;

            // Find the greatest common factor
            $g: gcf($i, $n);

            @if $g > 1 {
                // Reduced value of $i
                $i-r: $i/$g;
                // Reduced value of $n
                $n-r: $n/$g;
            }

            // Check if the reduced value of $n was also supplied in the list
            // of units to be built
            $canreduce: contains($units, $n-r);

            // Create units based on fractions
            .#{$prefix}#{$i}-#{$n},
            %#{$prefix}#{$i}-#{$n} {
                // If this unit can be reduced then extend the previous rule
                @if $canreduce {
                    // scss-lint:disable PlaceholderInExtend
                    @extend .#{$prefix}#{$i-r}-#{$n-r};
                } @else { // Otherwise create a new % width
                    @include grid-column($i, $n, $prefix);
                }
            }
        }
    }
}


@mixin grid-column($proportion, $context, $prefix: "") {
    flex-basis: percentage($proportion / $context);
    width: auto;
    max-width:  percentage($proportion / $context);

    @if ($prefix != "") {
        .grid--vertical-#{$prefix} > & {
            width: 100%;
            max-width: none;
            max-height: percentage($proportion / $context);
        }
    }
}


///
/// Creates a edge-triangle on one of the edges of an element
///
/// @author Eduardo Boucas
///
/// @param {String}   $pos - Which edge to create the edge-triangle on
/// @param {Length}   $offset - The offset from the origin (top or left) on the edge
/// @param {String}   $direction - Direction of the edge-triangle (in or out)
/// @param {Length}   $width - Width of the edge-triangle
/// @param {String}   $type - Type of the pseudo-element (before or after)
///
/// @example scss - A edge-triangle on the left edge of the parent, 15px from the top, pointing out with a width of 30px
///  @include edge-triangle('left', 15px, 'out', 30px);
///
/// @example scss - A edge-triangle on the bottom edge of the parent, 220px from the left, pointing out, with a width of 60px and using a :before
///  @include edge-triangle('bottom', 220px, 'out', 60px, 'before');
///
@mixin edge-triangle($pos, $offset, $direction, $width, $type: "after") {
    position: relative;

    &:#{$type} {
        position: absolute;
        // Reset position and offsets
        top: auto;
        right: auto;
        bottom: auto;
        left: auto;

        z-index: 9999;
        content: "";

        $h-offset: 0;
        $v-offset: 0;

        // Triangle: down
        @if ((($pos == "top") and ($direction == "in")) or ($pos == "bottom") and ($direction == "out")) {
            border-top: $width solid currentColor;
            border-right: $width solid transparent;
            border-bottom: 0;
            border-left: $width solid transparent;

            $v-offset: if($direction == 'in', 0, -$width);
        }

        // Triangle: up
        @if ((($pos == "top") and ($direction == "out")) or ($pos == "bottom") and ($direction == "in")) {
            border-top: 0;
            border-right: $width solid transparent;
            border-bottom: $width solid currentColor;
            border-left: $width solid transparent;

            $v-offset: if($direction == 'in', 0, -$width);
        }

        // Triangle: right
        @if ((($pos == "left") and ($direction == "in")) or ($pos == "right") and ($direction == "out")) {
            border-top: $width solid transparent;
            border-right: 0;
            border-bottom: $width solid transparent;
            border-left: $width solid currentColor;

            $h-offset: if($direction == 'in', 0, -$width);
        }

        // Triangle: left
        @if ((($pos == "left") and ($direction == "out")) or ($pos == "right") and ($direction == "in")) {
            border-top: $width solid transparent;
            border-right: $width solid currentColor;
            border-bottom: $width solid transparent;
            border-left: 0;

            $h-offset: if($direction == 'in', 0, -$width);
        }

        @if ($pos == "top") {
            top: $v-offset;
            left: if($offset == 'center', calc(50% - #{$width}), $offset);
        } @else if ($pos == "bottom") {
            bottom: $v-offset;
            left: if($offset == 'center', calc(50% - #{$width}), $offset);
        } @else if ($pos == "left") {
            top: if($offset == 'center', calc(50% - #{$width}), $offset);
            left: $h-offset;
        } @else if ($pos == "right") {
            top: if($offset == 'center', calc(50% - #{$width}), $offset);
            right: $h-offset;
        }
      }
}

// ==========================================================================
// # Animatable underline for content
// ==========================================================================
@mixin link-hover($bottom: -4px) {
    &:after {
        content: "";
        position: absolute;
        width: 0;
        height: rem(1);
        bottom: rem($bottom);
        left: 0;
        background-color: $link-color;
        transition: width ease-in-out 0.5s;
    }

    &:hover,
    &:focus {
        transition: color ease-in-out 0.5s;

        &:after {
            width: 100%;
        }
    }
}

// ==========================================================================
// # LEGACY/DEPRECATED
// ==========================================================================

@mixin respond-to() {
    @error "The respond-to mixins has be deprecated in favour of https://github.com/sass-mq/sass-mq";
}
